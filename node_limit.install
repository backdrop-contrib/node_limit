<?php

/**
 * @file
 * Installation functions for module node_limit.
 */

if (!defined("NODE_LIMIT_NO_LIMIT")) {
  define("NODE_LIMIT_NO_LIMIT", -1);
}

/**
 * Implements hook_schema().
 */
function node_limit_schema() {
  $schema['node_limit'] = array(
    'description' => 'The base Node Limit table',
    'fields' => array(
      'lid' => array(
        'description' => 'The limit id',
        'type' => 'int',
        'not null' => TRUE
      ),
      'type' => array(
        'description' => 'The {node}.type to which this limit applies',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''
      ),
      'nlimit' => array(
        'description' => 'The node limit for this limit',
        'type' => 'int',
        'not null' => TRUE,
        'default' => NODE_LIMIT_NO_LIMIT
      ),
      'title' => array(
        'description' => 'The display name for this limit',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'weight' => array(
        'description' => 'The weight of this limit',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('lid')
  );
  return $schema;
}

/**
 * Implements hook_install().
 *
 * In this case, we tack on some information to the existing node types, specifically the node limit access callback.
 * @TODO: Implement.
 * This module modifies nodes, so much of the configuration settings are added to the Node settings rather than kept
 * to this module.
 */
function node_limit_install() {
  foreach (node_type_get_types() as $type) {
    // Use the config for the Node.
    $config = config('node.type.' . $type->type);

    // Set the initial values for the callback and arguments used be each type in hook_menu().
    // @TODO: Updating this only on install seems...shortsighted.
    $type_url_str = str_replace('_', '-', $type->type);
    $access_callback = array('node/add/' . $type_url_str => array('access callback'));
    $config->set('settings.limit_access_callback', $access_callback );
    $access_arguments = array('node/add/' . $type_url_str => array('access arguments'));
    $config->set('settings.limit_access_arguments', $access_arguments);
    $config->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function node_limit_uninstall() {
  foreach (node_type_get_types() as $type) {
    // Use the config for the Node.
    $config = config('node.type.' . $type->type);
    // Clear the Node Limit settings from the Node config.
    $config->clear('settings.limit_access_callback');
    $config->clear('settings.limit_access_arguments');
    $config->save();
  }
}

/**
 * Implements hook_update_last_removed().
 */
function node_limit_update_last_removed() {
  return 7002;
}

