<?php

/**
 * @file
 * Backdrop module to restrict the number of nodes a user or role may create.
 */

const NODE_LIMIT_LIMIT_DOES_APPLY = 1;
const NODE_LIMIT_LIMIT_DOESNT_APPLY = 0;
const NODE_LIMIT_LIMIT_NEUTRAL = 2;
const NODE_LIMIT_PERM_ADMIN = "administer node limits";
const NODE_LIMIT_PERM_OVERRIDE = "override node limits";

if (!defined("NODE_LIMIT_NO_LIMIT")) {
  define("NODE_LIMIT_NO_LIMIT", -1);
}

/**
 * Implements hook_config_info().
 */
function node_limit_config_info() {
  $prefixes['node_limit.node_limit.settings'] = array(
    'label' => t('Settings for Node Limit'),
    'group' => t('Node Limit'),
  );
  return $prefixes;
}

  /**
 * Implements hook_permission().
 */
function node_limit_permission() {
  return array(
    NODE_LIMIT_PERM_ADMIN => array(
      'title' => t('Administer node limits'),
      'description' => t('Allow administrators to change the node limit values'),
    ),
    NODE_LIMIT_PERM_OVERRIDE => array(
      'title' => t('Override node limits'),
      'description' => t('Allow users to override all node limits'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function node_limit_menu() {
  $items = array();
  $items['admin/structure/node_limit'] = array(
    'title' => 'Node Limits',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_limit_list_limits'),
    'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
    'file' => 'node_limit.admin.inc',
  );
  $items['admin/structure/node_limit/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
    'weight' => -10,
    'file' => 'node_limit.admin.inc',
  );
  $items['admin/structure/node_limit/add'] = array(
    'title' => 'Add Node Limit',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_limit_limit_form'),
    'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node_limit.admin.inc',
  );
  $items['admin/structure/node_limit/%node_limit'] = array(
    'title' => 'Edit Node Limit',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_limit_limit_form', 3),
    'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node_limit.admin.inc',
  );
  $items['admin/structure/node_limit/%node_limit/delete'] = array(
    'title' => 'Delete Node Limit',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_limit_delete_form', 3),
    'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
    'type' => MENU_CALLBACK,
    'file' => 'node_limit.admin.inc',
  );
  $items['admin/structure/node_limit/%node_limit/clone'] = array(
    'title' => 'Clone Node Limit',
    'page callback' => 'node_limit_clone_limit',
    'page arguments' => array(3),
    'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
    'type' => MENU_CALLBACK,
    'file' => 'node_limit.admin.inc',
  );
  $items['admin/structure/node_limit/settings'] = array(
    'title' => 'Node Limits settings',
    'page callback'  => 'backdrop_get_form',
    'page arguments' => array('node_limit_settings_form'),
    'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node_limit.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function node_limit_menu_alter(&$items) {
  $config = config('node_limit.settings');
  node_type_cache_reset();
  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    // Saving old access callbacks to allow other modules to define their own

    $config->set('node_limit_' . $type->type . '_access_callback', $items['node/add/' . $type_url_str]['access callback']);
    $config->set('node_limit_' . $type->type . '_access_arguments', $items['node/add/' . $type_url_str]['access arguments']);
    $items['node/add/' . $type_url_str]['access callback'] = 'node_limit_access';
    $items['node/add/' . $type_url_str]['access arguments'] = array($type->type);
  }
  $items['node/add']['access callback'] = '_node_limit_add_access';
}

/**
 * Implements hook_init().
 */
function node_limit_init() {
  if (arg(0) == 'node' && arg(1) == 'add' && $type_url_str = arg(2)) {
    $type = str_replace('-', '_', $type_url_str);
    if (!node_limit_access($type)) {
      $nodetype = node_type_get_type($type);
      // Display message for user and redirect based on node limit settings.
      node_limit_message($nodetype);
    }
  }
}

/**
 * Rewritten access callback for node/add page.
 * Avoid access to this page when the user does not have the right to add any content type.
 *
 * @return bool
 */
function _node_limit_add_access() {
  $types = node_type_get_types();
  foreach ($types as $type) {
    if (node_hook($type->type, 'form') && node_limit_access($type->type, $context = 'node_add')) {
      return TRUE;
    }
  }
  if (user_access('administer content types')) {
    // There are no content types defined that the user has permission to create,
    // but the user does have the permission to administer the content types, so
    // grant them access to the page anyway.
    return TRUE;
  }
  return FALSE;
}

/**
 * Custom access callback for node/add/TYPE pages.
 * @param $type
 *   Content type to check
 * @param $account
 *   User account to check (default to current user)
 */
function node_limit_access($type, $context = '', $account = NULL) {
  global $user;
  $config = config('node_limit.settings');
  if (empty($account)) {
    $account = $user;
  }
  $access = &backdrop_static(__FUNCTION__, array());
  if (!array_key_exists($account->uid, $access)) {
    $access[$account->uid] = array();
  }

  if (!array_key_exists($type, $access[$account->uid])) {
    $node = new stdClass();
    $node->uid = $account->uid;
    $node->type = $type;

    // These are, by default, set in the node_limit_install().
    $oldCallback  = $config->get('node_limit_' . $type . '_access_callback');
    $oldArguments = $config->get('node_limit_' . $type . '_access_arguments', array());
    $oldAccess = !function_exists($oldCallback) || call_user_func_array($oldCallback, $oldArguments);
    $access[$account->uid][$type] = !_node_limit_violates_limit($node, $context) && $oldAccess;
  }
  return $access[$account->uid][$type];
}

/**
 * Implements hook_theme().
 * Register the two forms that require custom rendering.
 */
function node_limit_theme() {
  return array(
    'node_limit_list_limits' => array(
      'render element' => 'form',
    )
  );
}

/**
 * Implements hook_node_prepare().
 *
 * This is where we'll determine if the user may create new nodes or not.
 * We'll use hook_node_prepare, which is sent before the edit/add form
 * is constructed.
 */
function node_limit_node_prepare($node) {
  if (empty($node->nid) && _node_limit_violates_limit($node)) {
    // This means there is a violation and this is a new node.
    // Get the Node Type object or, potentially, FALSE if the node cannot be found.
    $nodetype = node_type_get_type($node);
    // Display message for user and redirect based on node limit settings.
    node_limit_message($nodetype);

    // Avoid redirection loop if there is just one content type
    $count = 0;
    foreach (node_type_get_types() as $type) {
      if (node_limit_access($type->name)) {
        $count++;
      }
    }
    if ($count > 1) {
      backdrop_goto('node/add');
    }
    else {
      backdrop_goto();
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function node_limit_node_validate($node, $form, &$form_state) {
  if (empty($node->nid) && _node_limit_violates_limit($node)) {
    //we have a violation!
    //and this is a new node
    $nodetype = node_type_get_type($node);
    form_set_error('title', t("You can't create more content of type !type", array('!type' => check_plain($nodetype->name))), 'error');
  }
}

/**
 * Helper function to check limit violations for this node.
 * Always returns FALSE for user 1.
 *
 * @param $node
 *   The node to check.
 * @param string $context
 * @return bool
 */
function _node_limit_violates_limit(&$node, $context = '') {
  if ($node->uid == 1 || user_access(NODE_LIMIT_PERM_OVERRIDE)) {
    return FALSE;
  }
  $limits = node_limit_limits($node);
  foreach ($limits as $lid) {
    $limit = node_limit_load($lid);
    if ($limit['nlimit'] == NODE_LIMIT_NO_LIMIT) {
      continue;
    }
    $select = _node_limit_sql($limit['lid']);
    $count = $select->execute()->fetchField();
    if ($count >= $limit['nlimit']   && empty($context)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Generates the SQL statement to find the nodes that apply to a particular limit.
 * Modules that implement hook_node_limit_sql() should sprintf their arguments
 * into the returned array.
 *
 * @param $lid
 *   Identifier of limit rule.
 * @return SelectQuery|stdClass[]
 */
function _node_limit_sql($lid) {
  $select = db_select('node', 'n');
  $select->addExpression('COUNT(n.nid)', 'number');
  module_invoke_all('node_limit_sql', $lid, $select);

  return $select;
}

/**
 * Returns all the limits that can be applied to a specific node.
 *
 * @param $node
 *   The node object that may be limited.
 */
function node_limit_limits(&$node) {
  $user = user_load($node->uid);
  //get all the limits:
  $query = db_select('node_limit', 'nl')
    ->fields('nl')
    ->orderBy('weight', 'ASC')
    ->execute();

  $applicable_limits = array();
  foreach ($query as $row) {
    // This particular limit id.
    $lid = $row->lid;
    $applies = TRUE;

    $submodule_applies = module_invoke_all('node_limit_applies_in_context', $lid, $node, $user);
    foreach ($submodule_applies as $module => $module_applies) {
      // A submodule returns DOESNT_APPLY if it requires a specific user or role, etc,
      // and the context given does not satisfy that.
      if ($module_applies == NODE_LIMIT_LIMIT_DOESNT_APPLY) {
        $applies = FALSE;
      }
    }

    if ($applies == TRUE) {
      $applicable_limits[] = $lid;
    }
  }

  return $applicable_limits;
}

/**
 * Theme the node limit list form.
 */
function theme_node_limit_list_limits($variables)
{
  $form = $variables['form'];

  $rows = array();
  foreach (element_children($form['limits']) as $key) {
    if (isset($form['limits'][$key]['title'])) {
      $limit = &$form['limits'][$key];

      $row = array();
      $row[] = backdrop_render($limit['title']);
      $row[] = backdrop_render($limit['limit']);
      if (isset($limit['weight'])) {
        $limit['weight']['#attributes']['class'] = array('node_limit-weight');
        $row[] = backdrop_render($limit['weight']);
      }
      $row[] = backdrop_render($limit['edit']);
      $row[] = backdrop_render($limit['list']);
      $row[] = backdrop_render($limit['clone']);
      $rows[] = array('data' => $row, 'class' => array('draggable'));
    }
  }

  $header = array(t('Title'));
  $header[] = t('Limit');
  if (isset($form['save'])) {
    $header[] = t('Weight');
    backdrop_add_tabledrag('node_limit', 'order', 'sibling', 'node_limit-weight');
  }
  $header[] = array('data' => t('Actions'), 'colspan' => '3');
  $output = "";
  try {
    $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No limit available.') . ' ' . backdrop_render($form['create']), 'attributes' => array('id' => 'node_limit'))) . backdrop_render_children($form);
  } catch (Exception $e) {
    watchdog_exception('Node Limit', $e);
  }
  return $output;
}

/**
 * Helper function to get the next available node limit id.
 */
function _node_limit_next_limit_id() {
  $select = db_select('node_limit', 'nl');
  $select->addExpression('MAX(lid)+1', 'lid');
  $query = $select->execute();

  $next_lid = $query->fetchField();
  return max($next_lid, 1);
}

/**
 * Loads a node limit.
 *
 * @param $lid
 *   The limit id.
 * @return array|false
 *   FALSE if the limit couldn't be loaded; otherwise the limit rule.
 */
function node_limit_load($lid) {
  if (!is_numeric($lid)) {
    return FALSE;
  }

  $info = db_select('node_limit', 'nl')
    ->fields('nl')
    ->condition('lid', $lid)
    ->execute()
    ->fetchAssoc();
  if ($info['lid'] == $lid && intval($lid) >= 0) {
    // Load up the information from the other modules.
    $res = module_invoke_all('node_limit_load', $lid);
    return array_merge($info, $res);
  }
  else {
    return FALSE;
  }
}

/**
 * Delete node limits
 *
 * @param $lids
 * @param bool $silent
 *   Hide success message.
 */
function node_limit_delete($lids, $silent = FALSE) {
  if (!is_array($lids)) {
    $lids = array($lids);
  }
  if (empty($lids)) {
    return;
  }
  $num = db_delete('node_limit')
    ->condition('lid', $lids, 'IN')
    ->execute();

  module_invoke_all('node_limit_delete', $lids);

  if ($num > 0 && !$silent) {
    backdrop_set_message(t('Deleted !num.', array('!num' => format_plural((int) $num, '1 limit rule', '@count limit rules'))));
  }
}

/**
 * Callback to save a node limit back to the database.
 *
 * @param $limit
 *   The limit data.
 */
function node_limit_save($limit) {
  node_limit_delete($limit['lid'], TRUE);
  // Attempt to save the Node Limit to the database.
  try {
    db_insert('node_limit')
      ->fields(array(
        'lid' => $limit['lid'],
        'nlimit' => $limit['nlimit'],
        'title' => $limit['title'],
        'weight' => $limit['weight']
      ))
      ->execute();
  }
  catch (Exception $e) {
    watchdog_exception('Node Limit', $e);
  }

  $modules = module_implements('node_limit_save');
  foreach ($modules as $module) {
    $applies = isset($limit[$module]);
    $element = $applies ? $limit[$module] : '';
    module_invoke($module, 'node_limit_save', $limit['lid'], $applies, $element);
  }
}



/**
 * Display message for user and redirect based on node limit settings.
 *
 * @param $nodetype
 *   Load current node type object.
 */

function node_limit_message($nodetype) {
  $config = config('node_limit.settings');
  // Check if enabled custom message option.
  $custom_message = $config->get('custom_msg');

  // @TODO: Change logic so that if the custom message has value, make the settings.

  if ($custom_message) {
    // Get settings of node type.
    $settings = $config->get('node_limit_settings_' . $nodetype->type);
    // Get redirect path.
    $redirect_path = $settings['redirect_' . $nodetype->type];
    // Format text.
    $text = t($settings['message_' . $nodetype->type], array(
      '[node_limit:type_title]' => check_plain($nodetype->name),
      '[node_limit:type_name]' => $nodetype->type,
    ));
  }
  else {
    // Get global text message and redirect.
    $text = $config->get('node_limit_global_msg');
    $redirect_path = $config->get('node_limit_global_redirect', NULL);
    // Format text.
    $text = t($text, array(
      '[node_limit:type_title]' => check_plain($nodetype->name),
      '[node_limit:type_name]' => $nodetype->type,
    ));
  }

  // Display message for user.
  backdrop_set_message($text, 'error');

  // Redirect user if a redirect path exists.
  if ($redirect_path != NULL) {
    backdrop_goto($redirect_path);
  }
}
