<?php

define("NODE_LIMIT_NO_LIMIT", -1);

define("NODE_LIMIT_PERM_ADMIN", "administer node limits");

define("NODE_LIMIT_LIMIT_DOESNT_APPLY", 0);
define("NODE_LIMIT_LIMIT_DOES_APPLY", 1);
define("NODE_LIMIT_LIMIT_NEUTRAL", 2);

/**
 * implementation of hook_perm()
 */
function node_limit_perm() {
	return array(NODE_LIMIT_PERM_ADMIN);
}

/**
 * implementation of hook_menu()
 */
function node_limit_menu() {
	$items = array();
	$items['admin/user/node_limit'] = array(
		'title' => t('Node Limits'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_limit_list_limits'),
		'access arguments' => array(NODE_LIMIT_PERM_ADMIN)
	);
	
	$items['admin/user/node_limit/list'] = array(
	  'title' => t('List'),
	  'type' => MENU_DEFAULT_LOCAL_TASK,
	  'weight' => -10
	);
	
	$items['admin/user/node_limit/add'] = array(
	  'title' => t('Add Node Limit'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('node_limit_limit_form', '0'),
	  'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
	  'type' => MENU_LOCAL_TASK
	);
	
	$items['admin/user/node_limit/%/delete'] = array(
	  'title' => t('Delete Node Limit'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('node_limit_delete_form', 3),
	  'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
	  'type' => MENU_CALLBACK
	);
	
	$items['admin/user/node_limit/%'] = array(
	  'title' => t('Edit Node Limit'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('node_limit_limit_form', 3),
	  'access arguments' => array(NODE_LIMIT_PERM_ADMIN),
	  'type' => MENU_CALLBACK
	);
	
	return $items;
}

/**
 * implementation of hook_theme()
 * register the two forms that require custom rendering
 */
function node_limit_theme() {
	return array(
		'node_limit_limit_form' => array(
			'arguments' => array('form' => NULL)
		),
		'node_limit_list_limits' => array(
		  'arguments' => array('form' => NULL)
		)
	);
}

/**
 * implmentation of hook_nodeapi
 * this is where we'll determine if the user may create new nodes or not
 * we'll key of $op == 'prepare', 
 * which is sent before the edit/add form is constructed
 */
function node_limit_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'prepare') {
    if ($node->nid > 0 && _node_limit_violates_limit($node)) {
      //we have a violation!
      //and this is a new node
      drupal_access_denied();
      drupal_goto('node/add');
    }
  }
}

/**
 * returns t/f depending on whther the $node violates a limit
 * always returns false for user 1
 */
function _node_limit_violates_limit(&$node) {
  if ($node->uid == 1) { return false; }
  $limit = node_limit_limit($node);
  if ($limit['limit'] == NODE_LIMIT_NO_LIMIT) { return false; }
  $sql = _node_limit_sql($limit['lid']);
  $count = db_result(db_query($sql));
  if ($count >= $limit['limit']) { return true; }
  return false;
}

/**
 * returns a generated sql statement to find the nodes that apply to a particular limit
 * modules that implement hook_node_limit_sql should sprintf their arguments
 * into the returned array
 * this will be changed in drupal 7, which will be able to accept an array of arguments to db_query
 */
function _node_limit_sql($lid) {
  $sql = "SELECT COUNT(n.nid) AS number FROM {node} AS n";
  $components = module_invoke_all('node_limit_sql', $lid);
  $joins = (isset($components['join']) ? implode(' ', $components['join']) : '');
  $wheres = (isset($components['where']) ? 'WHERE '. implode(' ', $components['where']) : '');
  
  $sql = $sql . ' ' . $joins . ' ' . $wheres;
  return $sql;
}

/**
 * @function node_limit_limit returns a limit for a node type
 * @param $node the node that may be limited
 */
function node_limit_limit(&$node) {
  $user = user_load($node->uid);
  //get all the limits that apply to this type:
  $sql = "SELECT lid FROM {node_limit} WHERE `type`='%s' OR `type`='--any--' ORDER BY weight ASC";
  $res = db_query($sql, $node->type);
  $applicable_limits = array();
  while($l = db_fetch_array($res)) {
    //this particular limit id
    $lid = $l['lid'];
    $applies = true;
    
    $submodule_applies = module_invoke_all('node_limit_applies_in_context', $lid, $node, $user);
    foreach($submodule_applies as $module => $module_applies) {
      //a submodule returns DOESNT_APPLY if the subm requires a specific user or role, etc,
      //and the context given does not satisfy that
      if ($module_applies == NODE_LIMIT_DOESNT_APPLY) { $applies = false; }
    }
    
    if ($applies == true) {
      $applicable_limits[] = $lid;
    }
  }
  
  if (count($applicable_limits) <= 0) { return array('limit' => NODE_LIMIT_NO_LIMIT); }
  
  /**
   * This section:  determines the best limit using a naive algorithm.
   * The idea here is that the limit that uses the most number of submodules
   * will be the limit that is most specific to this context
   * This implementation will have to suffice until a smarter one can be contrived.  =)
   */
  $best_limit = array('lid' => -1, 'weight' => 10000);
  foreach($applicable_limits as $lid) {
    $limit = node_limit_load($lid);
    if ($limit['weight'] < $best_limit['weight']) {
      //this limit is lighter than the best limit
      $best_limit = $limit;
    } else if ($limit['weight'] == $best_limit['weight']) {
      //this limit is the same weight as the best limit
      //perform a naive choice between the two
      if (count($limit) > count($best_limit)) {
        //this limit implements more submodules than the best limit
        //and is therefore "more specific"
        $best_limit = $limit;
      }
    } else {
      //this limit it heavier than the best limit
      continue;
    }
  }
  //this case should never happen, but just in case....
  if ($best_limit['lid'] == -1) { return array('limit' => NODE_LIMIT_NO_LIMIT); }
  return $best_limit;
}

/**
 * theme the node limit list form
 */
function theme_node_limit_list_limits($form) {
  $header = array(
//    array('data' => t('Title'), 'colspan' => '2'),
    t('Title'),
    t('Content Type'),
    t('Limit'),
    t('Weight'),
    t('Actions')
  );
  $rows = array();
  foreach(element_children($form['limits']) as $lid) {
    $row = array();
    $form['limits'][$lid]['weight']['#attributes']['class'] = 'node_limit-weight';
    $row[] = drupal_render($form['limits'][$lid]['title']);
    $row[] = drupal_render($form['limits'][$lid]['type']);
    $row[] = drupal_render($form['limits'][$lid]['limit']);
    $row[] = drupal_render($form['limits'][$lid]['weight']);
    $row[] = drupal_render($form['limits'][$lid]['actions']);
    $rows[] = array(
      'data' => $row,
      'class' => 'draggable'
    );
  }
  
	$out = theme('table', $header, $rows, array('id' => 'node_limit-table'));
	$out .= drupal_render($form);
  drupal_add_tabledrag('node_limit-table', 'order', 'sibling', 'node_limit-weight');
	return $out;

}

/**
 * form for listing the created limits
 * created as a form so that the user can adjust the weight
 */
function node_limit_list_limits() {
  $weights = array();
  for($i = -10; $i <= 10; $i++) { $weights[$i] = $i; }
  
  $form = array('#tree' => true);
  $form['limits'] = array();
  $types = _node_limit_content_types();
  $sql = "SELECT * FROM {node_limit} ORDER BY weight ASC";
  $res = db_query($sql);
  while($rec = db_fetch_array($res)) {
    $form['limits'][$rec['lid']]['weight'] = array(
      '#type' => 'select',
      '#options' => $weights,
      '#default_value' => $rec['weight']
    );
    $form['limits'][$rec['lid']]['title'] = array(
      '#value' => $rec['title']
    );
    $form['limits'][$rec['lid']]['type'] = array(
      '#value' => $types[$rec['type']]
    );
    $form['limits'][$rec['lid']]['limit'] = array(
      '#value' => $rec['limit']
    );
    $form['limits'][$rec['lid']]['actions'] = array(
      '#value' => l(t('Edit'), 'admin/user/node_limit/'.$rec['lid']).' '.l(t('Delete'), 'admin/user/node_limit/'.$rec['lid'].'/delete')
    );
  }
  
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save Limits')
  );
  
  return $form;
}

/**
 * Save the module weights
 */
function node_limit_list_limits_submit($form_id, &$form_state) {
  $sql = "UPDATE {node_limit} SET `weight`='%d' WHERE `lid`='%d'";
  foreach($form_state['values']['limits'] as $lid => $info) {
    db_query($sql, $info['weight'], $lid);
  }
  drupal_set_message(t('Limits saved!'));
}

/**
 * theme the admin settings form so that we have tables inside fieldsets
 */
function theme_node_limit_limit_form($form) {
  if (!isset($form['info'])) {
    die();
  }
	$rows = array();
	
	foreach($form['node_limit_elements'] as $module => &$element) {
	  if (is_array($element['applies']) && is_array($element['element'])) {
	    if ($element['element']['#custom_render'] === true && module_hook($module, 'node_limit_render_element')) {
	      //we can't use module_invoke because form elements must be passed byref
	      $func = $module.'_node_limit_render_element';
	      $rendered_element = $func($element['element']);
	    } else {
	      $rendered_element = drupal_render($element['element']);
	    }
	    $rows[] = array(
	      drupal_render($element['applies']),
	      $rendered_element
	    );
	  }
	}

	$output = drupal_render($form['info']);
	$output .= theme('table', array(t('Applies to:'), ''), $rows);
	$output .= drupal_render($form);
	return $output;
}

/**
 * the node_limit settings form
 */
function node_limit_limit_form(&$form_state, $lid) {
  if ($lid > 0) {
    $limit = node_limit_load($lid);
    if ($limit === false) {
      drupal_not_found();
      return;
    }
  }
  $types = _node_limit_content_types();
	$form = array();
	$form['#tree'] = true;
	if ($lid > 0) {
	  $form['lid'] = array(
	    '#type' => 'hidden',
	    '#value' => $lid
	  );
	}
	
	$form['info']['title'] = array(
	  '#title' => t('Description'),
    '#type' => 'textfield',
	  '#default_value' => $limit['title'],
	  '#required' => true,
	  '#description' => t('The description for this Node Limit')
	);
	$form['info']['type'] = array(
	  '#title' => t('Content Type'),
	  '#type' => 'select',
	  '#options' => $types,
	  '#required' => true,
	  '#default_value' => $limit['type'],
	  '#description' => t('The content type to which this limit applies')
	);
	$form['info']['limit'] = array(
	  '#title' => t('Limit'),
	  '#type' => 'textfield',
	  '#default_value' => (isset($limit['limit']) ? $limit['limit'] : NODE_LIMIT_NO_LIMIT),
	  '#size' => 20,
	  '#required' => true,
	  '#description' => t('The number of nodes for this limit.  Must be an integer greater than 0 or %nolimit for no limit', array('%nolimit' => NODE_LIMIT_NO_LIMIT))
	);
	
	$elements = module_invoke_all('node_limit_element', $lid);
	foreach($elements as $module => $element) {
	  $form['node_limit_elements'][$module]['applies'] = array(
	    '#type' => 'checkbox',
	    '#title' => $element['#title'],
	    '#default_value' => isset($limit[$module])
	  );
	  $element['#title'] = '';
	  $form['node_limit_elements'][$module]['element'] = $element;
	}
		
	$form['save'] = array(
		'#type' => 'submit',
		'#value' => ($lid > 0 ? t('Edit Node Limit') : t('Add Node Limit'))
	);
	return $form;
}

/**
 * validation hook for node_limit_limit_form
 * allows submodules that are applied to validate their own input
 */
function node_limit_limit_form_validate($form_id, &$form_state) {
  if (!is_numeric($form_state['values']['info']['limit'])) {
    form_set_error('info][limit', t('Node limits must be an integer'));
  } else if (intval($form_state['values']['info']['limit']) != floatval($form_state['values']['info']['limit'])) {
    //can't use is_int because is_int("2") == false
    form_set_error('info][limit', t('Node limits must be an integer'));
  } else if (intval($form_state['values']['info']['limit']) < NODE_LIMIT_NO_LIMIT) {
    form_set_error('info][limit', t('Node limits cannot be less that %nolimit', array('%nolimit' => NODE_LIMIT_NO_LIMIT)));
  }
  
  if (trim($form_state['values']['info']['title']) == '') {
    form_set_error('info][title', t('Invalid Node Limit title'));
  }
  
  foreach($form_state['values']['node_limit_elements'] as $module => $element) {
    if ($element['applies'] === 1) {
      //they checked the box!
      $result = module_invoke($module, 'node_limit_element_validate', $element['element']);
      if (is_array($result) && isset($result['error'])) {
        form_set_error('node_limit_elements]['.$module.'][element', $result['error']);
      }
    }
  }
}

/**
 * submission hook for node_limit_limit_form
 * calls the submission hook on applied submodules to allow them to save their data
 */
function node_limit_limit_form_submit($form_id, &$form_state) {
  if (isset($form_state['values']['lid'])) {
    $lid = $form_state['values']['lid'];
    db_query("DELETE FROM {node_limit} WHERE `lid`='%d'", $lid);
  } else {
    $lid = _node_limit_next_limit_id();
  }
  $type = $form_state['values']['info']['type'];
  $limit = intval($form_state['values']['info']['limit']);
  $title = $form_state['values']['info']['title'];
  
  db_query("INSERT INTO {node_limit} VALUES('%d', '%s', '%d', '%s', '0')", $lid, $type, $limit, $title);
  foreach($form_state['values']['node_limit_elements'] as $module => $element) {
    module_invoke($module, 'node_limit_element_submit', $lid, $element['applies'], $element['element']);
  }
  
  $form_state['redirect'] = 'admin/user/node_limit';
  drupal_set_message(t('Added limit "%limit"', array('%limit' => $title)));
}

/**
 * returns a confirmation form to delete a node limit
 */
function node_limit_delete_form(&$form_state, $lid) {
  $limit = node_limit_load($lid);
  if ($limit === false) { drupal_goto('admin/user/node_limit'); }
  $form = array(
    'lid' => array(
      '#type' => 'hidden',
      '#value' => $limit['lid']
    ) 
  );
  return confirm_form(array(), t('Are you sure you want to delete %name?', array('%name' => $limit['title'])), 'admin/user/node_limit');
}

/**
 * submission hook for node limit deletion
 */
function node_limit_delete_form_submit($form_id, &$form_state) {
  $lid = $form_state['values']['lid'];
  
}

/**
 * returns the next available node limit id
 */
function _node_limit_next_limit_id() {
  $next_lid = db_result(db_query("SELECT (MAX(lid)+1) AS lid FROM {node_limit}"));
  return ($next_lid == 0 ? 1 : $next_lid);
}

/**
 * returns an array of available content types
 */
function _node_limit_content_types() {
  $types = array('--any--' => t('--Any--'));
  $content_types = node_get_types('types');
  foreach($content_types as $type) {
    $types[$type->type] = $type->name;
  }
  return $types;
}

/**
 * loads a node limit
 * returns false if the limit couldn't be loaded
 */
function node_limit_load($lid) {
  $info = db_fetch_array(db_query("SELECT * FROM {node_limit} WHERE `lid`='%d'", $lid));
  if ($info['lid'] == $lid && intval($lid) >= 0) {
    //load up the information from the other modules
    //perhaps this isn't necessary.  does node_limit ever use the other modules info?
    //yes (for setting the default state of the "applies" checkbox when editing a limit)
    $res = module_invoke_all('node_limit_load', $lid);
    return array_merge($info, $res);
  } else {
    return false;
  }
}

?>