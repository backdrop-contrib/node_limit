<?php

/**
 * @file
 * Module to restrict the number of nodes by role.
 */

/**
 * Implements hook_user_role_delete().
 *
 * Delete all rules related to the role being deleted.
 */
function node_limit_role_user_role_delete($role) {
  $limits = db_select('node_limit_role', 'src')
    ->fields('src', array('lid'))
    ->condition('role', $role->name)
    ->execute();
  $lids = array();
  foreach ($limits as $limit) {
    $lids[] = $limit->lid;
  }
  node_limit_delete($lids);
}

/**
 * Implements hook_node_limit_applies_in_context().
 * Determine if a Node Limit applies to a user when adding a node.
 */
function node_limit_role_node_limit_applies_in_context($lid, $node, $user) {
  // By default, this Node Limit does NOT apply, but is actively enabled..
  $applies = NODE_LIMIT_LIMIT_DOESNT_APPLY;

  // Load the Node Limit object
  $limit = node_limit_role_node_limit_load($lid);

  // If there isn't a Node Limit, this submodule isn't even used right now.
  if (empty($limit)) {
    $applies = NODE_LIMIT_LIMIT_NEUTRAL;
  }

  elseif (!empty($user)) {
    // Is this limit placed on anonymous users?
    $isRoleAnonymous = $limit['node_limit_role']['name'] == BACKDROP_ANONYMOUS_ROLE;
    // How about Authenticated Users? Is this Node Limit for them?
    $isRoleAuth = $limit['node_limit_role']['name'] == BACKDROP_AUTHENTICATED_ROLE;

    /*
     * To determine if this Node Limit does, in fact, apply, it must meet the following conditions:
     * 1. The Role it applies to must be in the User Roles array of the current user or,
     * 2. The User ID is greater than zero and $isRoleAnonymous is True or,
     * 3. The User ID equals zero and $isRoleAuth is True
     */
    if ((in_array($limit['node_limit_role']['name'], $user->roles)) || ($user->uid > 0 && $isRoleAnonymous) || ($user->uid == 0 && $isRoleAuth)) {
      $applies = NODE_LIMIT_LIMIT_DOES_APPLY;
    }
  }

  return array('node_limit_role' => $applies);
}

/**
 * Implements hook_node_limit_sql().
 */
function node_limit_role_node_limit_sql($lid, SelectQuery $select) {
  $limit = node_limit_role_node_limit_load($lid);
  if (empty($limit)) {
    return;
  }

  if ($limit['node_limit_role']['name'] == BACKDROP_ANONYMOUS_ROLE) {
    $select->condition('uid', 0);
  }
  elseif ($limit['node_limit_role']['name'] == BACKDROP_AUTHENTICATED_ROLE) {
    $select->condition('uid', 0, '!=');
  }
  else {
    $subselect = db_select('users_roles', 'ur')
      ->fields('ur', array('uid'))
      ->condition('role', $limit['node_limit_role']['name']);
    $select->condition('uid', $subselect, 'IN');
  }
}

/**
 * Implements hook_node_limit_element().
 */
function node_limit_role_node_limit_element($lid = 0) {
  $limit = node_limit_role_node_limit_load($lid);
  $role = !empty($limit['node_limit_role']) ? $limit['node_limit_role'] : array();
  $roles = user_roles(); // returns an array of machine name => label for each role.

  if (!empty($roles)) {
    return array(
      'node_limit_role' => array(
        '#type' => 'select',
        '#title' => t('Role'),
        '#options' => $roles,
        '#default_value' => $role['name'],
      ),
    );
  }
  return array();
}

/**
 * Implements hook_node_limit_element_validate().
 */
function node_limit_role_node_limit_element_validate($element) {
  /**
   * Validation:
   * $element must be a role
   */
  $roles = user_roles();
  if (!isset($roles[$element])) {
    // Unknown role.
    return array(
      'error' => t('Unknown role "%role"', array('%role' => $element))
    );
  }
  return TRUE;
}

/**
 * Implements hook_node_limit_save().
 */
function node_limit_role_node_limit_save($lid, $applies, $element) {
  if ($applies) {
    // In the clone context, $element is an array containing the Role ID and the role name.
    if (is_array($element)) {
      $element = $element['machine_name'];
    }
    try {
      db_insert('node_limit_role')
        ->fields(array(
          'lid' => $lid,
          'role' => $element,
        ))
        ->execute();
    } catch (FieldsOverlapException $e) {
      backdrop_set_message(t('The Node Limit failed to save.'));
      watchdog_exception('node_limit_role', $e);
    } catch (NoFieldsException $e) {
      watchdog_exception('node_limit_role', $e);
    }
  }
}

/**
 * Implements hook_node_limit_delete().
 */
function node_limit_role_node_limit_delete($lids) {
  db_delete('node_limit_role')
    ->condition('lid', $lids, 'IN')
    ->execute();
}

/**
 * Implements hook_node_limit_load().
 * Returns  the machine name and label information of the Role that a Node Limit has.
 *
 * @note
 * Documentation on how this changed in Backdrop is available here:
 * https://docs.backdropcms.org/change-records/converted-user-roles-to-cmi
 */
function node_limit_role_node_limit_load($lid) {
  // We want the Roles that have a Node Limit.
  $result = db_query('SELECT role FROM node_limit_role WHERE lid = :lid', array(':lid' => $lid))->fetchField();
  $info = user_role_load($result);
  if (!empty($info->name)) {
    return array(
      'node_limit_role' => array(
        'name' => $info->name, // The machine name
        'label' => $info->label // The Role label (e.g. 'My role label')
      )
    );
  }
  return array();
}
